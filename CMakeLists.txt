cmake_minimum_required(VERSION 3.13)

#
# Set the ARM compiler and Gecko SDK paths
#
set(ARM_TOOLCHAIN $ENV{ARM_TOOLCHAIN})
if (NOT ARM_TOOLCHAIN)
  message(FATAL_ERROR "Please set env ARM_TOOLCHAIN to the arm toolchain")
endif()

set(GECKO_SDK $ENV{GECKO_SDK})
if (NOT GECKO_SDK)
  message(FATAL_ERROR "Please set env GECKO_SDK to the SiLabs Gecko SDK")
endif()

message("Using arm toolchain from ${ARM_TOOLCHAIN}")
message("Using GECKO SDK from ${GECKO_SDK}")

#
# Specify the required Gecko SDK components
#
list(APPEND GECKO_COMPONENTS efr32_device efr32_hardware
  iostream sleeptimer emlib)

#
# Create SDK cmake files.
#
# toolchain, firmware and CMSIS are specified separately as they
# do not create a library
#
execute_process(
  COMMAND perl ${CMAKE_CURRENT_LIST_DIR}/efr32_tools/mkcmakefiles.pl
  ${GECKO_SDK} toolchain firmware CMSIS ${GECKO_COMPONENTS}
  RESULT_VARIABLE ret
)
if (NOT ret EQUAL 0)
  message(FATAL_ERROR "mkcmakefiles.pl failed")
endif()

# Set toolchain file - created by mkcmakefiles.pl
set(CMAKE_TOOLCHAIN_FILE ./toolchain.cmake)

project(brd4314a_blinky)

enable_language(C CXX ASM)

#
# Generate compile_commands.json for intellisense
#
set(CMAKE_EXPORT_COMPILE_COMMANDS ON)

#
# Add some binary output directories 
#
set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/lib)
set(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/lib)
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/bin)


##### Project Setup #####

#
# ${EFR32_DEVICE} sets the target specific model name
# Sets device / used to locate HAL files
#
#set(EFR32_DEVICE EFR32BG22C224F512GN32)
set(EFR32_DEVICE BGM220PC22HNA)
set(BOARD BRD4314A)
message("EFR32 Device used: ${EFR32_DEVICE}")


# Add additional modules, firmware and gecko cmake
# files generated by mkcmakefiles.pl
include(build/firmware.cmake)
add_subdirectory(build/gecko_sdk)

# Add the subdirs with the actual code
add_subdirectory(src)

# Link the libraries. GECKO_COMPONENTS is defined above as input
# to mkcmakefiles.pl
target_link_libraries(${CMAKE_PROJECT_NAME} PUBLIC 
  gcc
  c 
  nosys
  ${GECKO_COMPONENTS}
)

# Add some more project specific compile commands if neccessary
# Can be also added through cmake
target_compile_options(${CMAKE_PROJECT_NAME} PUBLIC)

# Link with the nano C std library
target_link_options(${CMAKE_PROJECT_NAME} 
                            PUBLIC
                            --specs=nano.specs)

# Add the binary for flashing
create_bin_output(${CMAKE_PROJECT_NAME})



